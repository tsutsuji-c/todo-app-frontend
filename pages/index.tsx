import React, { useState } from 'react'
import { DragDropContext, Droppable, Draggable, resetServerContext } from 'react-beautiful-dnd'
import type { DropResult } from 'react-beautiful-dnd'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { TaskType } from 'types/task'
import { BoardType } from 'types/board'
import { Board } from 'components/board'

const Home = () => {
  /* 
  サンプルデータ群
  データ構成について後で整理する
  */
  const boardData: { [id: string]: BoardType } = {
    todo: { id: 'todo', title: 'todo', taskIds: ['1', '2', '3', '4', '5'] },
    complete: { id: 'complete', title: 'complete', taskIds: ['6'] },
    progress: { id: 'progress', title: 'progress', taskIds: [] },
  }
  const boardOrder: string[] = ['todo', 'progress', 'complete']

  const taskData: { [id: string]: TaskType } = {
    '1': { id: '1', name: 'testだよ1', comment: 'お仕事面倒です' },
    '2': { id: '2', name: 'testだよ2', comment: 'お仕事面倒です' },
    '3': { id: '3', name: 'testだよ3', comment: 'お仕事面倒です' },
    '4': { id: '4', name: 'testだよ4', comment: 'お仕事面倒です' },
    '5': { id: '5', name: 'testだよ5', comment: 'お仕事面倒です' },
    '6': { id: '6', name: 'testだよ6', comment: 'お仕事面倒です' },
  }
  const [boardList, updateBoardData] = useState(boardData)
  const [boardOrderList, updateBoardOrderList] = useState(boardOrder)

  function onDragEndHandler(result: DropResult) {
    const { destination, source, draggableId, type } = result
    if (!destination) return
    // boardやtaskを移動させていない場合処理を行わない
    if (destination.droppableId === source.droppableId && destination.index === source.index) return

    // bordの移動処理
    if (type === 'board') {
      const newBoardOrder = Array.from(boardOrderList)
      newBoardOrder.splice(source.index, 1)
      newBoardOrder.splice(destination.index, 0, draggableId)
      updateBoardOrderList(newBoardOrder)
      return
    }
    const start = boardList[source.droppableId]
    const finish = boardList[destination.droppableId]

    // 同一のboard内での移動処理
    if (start === finish) {
      const newTaskIds = Array.from(start.taskIds)
      newTaskIds.splice(source.index, 1)
      newTaskIds.splice(destination.index, 0, draggableId)

      const newBoard = {
        ...start,
        taskIds: newTaskIds,
      }

      const newBoardData = {
        ...boardList,
        [newBoard.id]: newBoard,
      }
      updateBoardData(newBoardData)
      return
    }
    // 他のboardに移動する場合の処理
    const startTaskIds = Array.from(start.taskIds)
    startTaskIds.splice(source.index, 1)
    const startBoard = {
      ...start,
      taskIds: startTaskIds,
    }
    const finishTaskIds = Array.from(finish.taskIds)
    finishTaskIds.splice(destination.index, 0, draggableId)
    const finishBoard = {
      ...finish,
      taskIds: finishTaskIds,
    }

    const newBoardData = {
      ...boardList,
      [startBoard.id]: startBoard,
      [finishBoard.id]: finishBoard,
    }
    console.log(newBoardData)
    updateBoardData(newBoardData)
  }
  return (
    <div className='container'>
      <Head>
        <title>Create My Todo App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <DragDropContext onDragEnd={onDragEndHandler}>
          <Droppable droppableId='all-boards' direction='horizontal' type='board'>
            {(provided) => (
              <div {...provided.droppableProps} ref={provided.innerRef}>
                <div className='flex flex-row'>
                  {boardOrderList.map((boardId, index) => {
                    const board = boardList[boardId]
                    const taskList = board.taskIds.map((id) => taskData[id])
                    return (
                      <Board
                        key={board.id}
                        droppableId={board.id}
                        taskList={taskList}
                        index={index}
                      />
                    )
                  })}
                </div>
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </main>
    </div>
  )
}
export default Home

// SSR時の挙動調整
// resetServerContext()を用いないとreact-beautiful-dndは動作しない
export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  resetServerContext() // <-- CALL RESET SERVER CONTEXT, SERVER SIDE
  return { props: { data: [] } }
}
